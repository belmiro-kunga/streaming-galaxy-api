
import React, { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { 
  UploadCloud, 
  FileType, 
  ArrowRight, 
  Check, 
  AlertCircle,
  FileSpreadsheet,
  Download
} from "lucide-react";
import { contentAPI } from '@/services/content/contentAPI';
import { ContentItem } from '@/types/api';
import { useToast } from '@/hooks/use-toast';
import Papa from 'papaparse';
import CsvTemplateDownloader from './CsvTemplateDownloader';

export default function ImportContentTab() {
  const [activeTab, setActiveTab] = useState<string>('csv');
  const [file, setFile] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState<boolean>(false);
  const [uploadProgress, setUploadProgress] = useState<number>(0);
  const [importedData, setImportedData] = useState<any[]>([]);
  const [uploadResult, setUploadResult] = useState<{
    success: boolean;
    message: string;
    imported?: number;
    total?: number;
  } | null>(null);
  const { toast } = useToast();

  // Handle file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
      setUploadResult(null);
      
      // Parse CSV file
      if (e.target.files[0].type === 'text/csv') {
        Papa.parse(e.target.files[0], {
          header: true,
          complete: (results) => {
            console.log('CSV parsed:', results.data);
            setImportedData(results.data);
          },
          error: (error) => {
            console.error('Error parsing CSV:', error);
            toast({
              title: "Erro ao processar CSV",
              description: "O arquivo CSV não pôde ser processado. Verifique o formato.",
              variant: "destructive"
            });
          }
        });
      }
    }
  };

  // Handle file upload
  const handleFileUpload = async () => {
    if (!file) {
      toast({
        title: "Nenhum arquivo selecionado",
        description: "Por favor, selecione um arquivo para importar.",
        variant: "destructive"
      });
      return;
    }

    // If not a CSV file
    if (file.type !== 'text/csv') {
      toast({
        title: "Formato de arquivo inválido",
        description: "Por favor, selecione um arquivo CSV.",
        variant: "destructive"
      });
      return;
    }

    setIsUploading(true);
    setUploadProgress(0);
    
    try {
      // Simulate progress updates
      const progressInterval = setInterval(() => {
        setUploadProgress(prev => {
          const newProgress = prev + 5;
          if (newProgress >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return newProgress;
        });
      }, 300);
      
      // Transform data to ContentItem format
      const contentItems: ContentItem[] = importedData.map((row: any) => {
        // Skip empty rows
        if (!row.Título) return null;
        
        const isMovie = !row.Temporada || !row.Episódio;
        
        return {
          id: '', // Will be generated by the API
          tipo: isMovie ? 'filme' : 'serie',
          titulo: row.Título || row['Título'] || '',
          descricao: row.Descrição || '',
          ano_lancamento: parseInt(row.Ano || '0', 10) || new Date().getFullYear(),
          classificacao_etaria: row.Idade || row['Classificação_Etária'] || 'L',
          gratuito: row.Gratuito === 'Sim',
          duracao: row.Duração || '',
          video_url: row.Link || '',
          video_url_480p: row.Link_480p || '',
          video_url_720p: row.Link_720p || '',
          video_url_1080p: row.Link_1080p || '',
          poster_url: row.Thumbnail || '',
          generos: row.Gênero ? row.Gênero.split(',').map((g: string) => g.trim()) : [],
          status: 'pendente',
          metadata: {
            diretorio: row.Diretório || row.Diretorio || '',
            titulo_original: row['Título Original'] || row.Título_Original || '',
            origem: row.Origem || '',
            diretor: row.Diretor || '',
            elenco: row.Elenco || '',
            ...(isMovie ? {} : {
              temporada: parseInt(row.Temporada || '1', 10),
              episodio: parseInt(row.Episódio || row['Número Episódio'] || '1', 10),
              total_temporadas: parseInt(row['Número Temporadas'] || '1', 10),
              titulo_episodio: row['Título Episódio'] || '',
            })
          }
        };
      }).filter(Boolean);
      
      // Send to API
      const result = await contentAPI.importContentFromCSV(contentItems);
      
      // Set upload progress to 100%
      clearInterval(progressInterval);
      setUploadProgress(100);
      
      // Show result
      setUploadResult(result);
      
      toast({
        title: result.success ? "Importação concluída" : "Erro na importação",
        description: result.message,
        variant: result.success ? "default" : "destructive"
      });
    } catch (error) {
      console.error('Error importing content:', error);
      toast({
        title: "Erro na importação",
        description: "Ocorreu um erro ao importar os conteúdos. Tente novamente.",
        variant: "destructive"
      });
      setUploadResult({
        success: false,
        message: 'Ocorreu um erro ao importar os conteúdos. Tente novamente.'
      });
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <div>
          <h2 className="text-2xl font-bold">Importar Conteúdo</h2>
          <p className="text-gray-400 mt-1">
            Importe filmes e séries para a plataforma
          </p>
        </div>
        
        <CsvTemplateDownloader />
      </div>
      
      <Tabs defaultValue="csv" value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="mb-6 bg-gray-800">
          <TabsTrigger value="csv" className="flex-1">
            <FileSpreadsheet className="mr-2 h-4 w-4" /> Importar CSV
          </TabsTrigger>
          <TabsTrigger value="api" className="flex-1">
            <FileType className="mr-2 h-4 w-4" /> API Externa
          </TabsTrigger>
        </TabsList>
        
        {/* CSV Import Tab */}
        <TabsContent value="csv">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="lg:col-span-2 border-gray-800 bg-gray-900 shadow-md">
              <CardHeader>
                <CardTitle>Importar por CSV</CardTitle>
                <CardDescription>
                  Faça upload de um arquivo CSV com dados de filmes ou séries
                </CardDescription>
              </CardHeader>
              <CardContent>
                {!file ? (
                  <div className="border-2 border-dashed border-gray-700 rounded-lg p-12 text-center">
                    <UploadCloud className="h-12 w-12 mx-auto text-gray-500 mb-4" />
                    <h3 className="text-lg font-medium mb-2">Arraste e solte o arquivo CSV</h3>
                    <p className="text-gray-400 mb-6">ou clique no botão abaixo para selecionar</p>
                    
                    <div className="flex justify-center">
                      <label className="relative cursor-pointer">
                        <input
                          type="file"
                          accept=".csv"
                          className="sr-only"
                          onChange={handleFileChange}
                        />
                        <div className="inline-flex items-center justify-center px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80">
                          <UploadCloud className="mr-2 h-4 w-4" />
                          Selecionar Arquivo
                        </div>
                      </label>
                    </div>
                  </div>
                ) : (
                  <div>
                    <div className="flex items-center justify-between p-4 border border-gray-800 bg-gray-800/50 rounded-md mb-4">
                      <div className="flex items-center">
                        <FileSpreadsheet className="h-8 w-8 text-blue-400 mr-3" />
                        <div>
                          <p className="font-medium">{file.name}</p>
                          <p className="text-sm text-gray-400">
                            {(file.size / 1024).toFixed(2)} KB • {importedData.length} registros
                          </p>
                        </div>
                      </div>
                      <Button
                        variant="outline"
                        onClick={() => {
                          setFile(null);
                          setImportedData([]);
                          setUploadResult(null);
                        }}
                      >
                        Remover
                      </Button>
                    </div>
                    
                    {isUploading ? (
                      <div className="space-y-3">
                        <p className="text-sm text-center">Processando importação... {uploadProgress}%</p>
                        <div className="w-full bg-gray-800 rounded-full h-2.5">
                          <div 
                            className="bg-primary h-2.5 rounded-full" 
                            style={{ width: `${uploadProgress}%` }}
                          ></div>
                        </div>
                      </div>
                    ) : (
                      <Button
                        className="w-full"
                        onClick={handleFileUpload}
                      >
                        <UploadCloud className="mr-2 h-4 w-4" />
                        Importar Conteúdo
                      </Button>
                    )}
                    
                    {uploadResult && (
                      <div className={`mt-4 p-4 rounded-md ${
                        uploadResult.success ? 'bg-green-900/20 border border-green-800' : 'bg-red-900/20 border border-red-800'
                      }`}>
                        <div className="flex items-start">
                          {uploadResult.success ? (
                            <Check className="h-5 w-5 text-green-500 mr-2 mt-0.5" />
                          ) : (
                            <AlertCircle className="h-5 w-5 text-red-500 mr-2 mt-0.5" />
                          )}
                          <div>
                            <h4 className="font-medium">{uploadResult.success ? 'Importação concluída' : 'Erro na importação'}</h4>
                            <p className="text-sm mt-1">{uploadResult.message}</p>
                            {uploadResult.success && uploadResult.imported && uploadResult.total && (
                              <p className="text-sm mt-2">
                                Importados {uploadResult.imported} de {uploadResult.total} itens
                              </p>
                            )}
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
            
            <Card className="border-gray-800 bg-gray-900 shadow-md">
              <CardHeader>
                <CardTitle>Templates e Ajuda</CardTitle>
                <CardDescription>
                  Baixe templates e veja instruções
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <h3 className="text-sm font-medium text-white">Templates disponíveis</h3>
                  
                  <div className="p-3 border border-gray-800 bg-gray-800/30 rounded-md hover:bg-gray-800/60 transition-colors">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center">
                        <FileSpreadsheet className="h-4 w-4 text-blue-400 mr-2" />
                        <span className="text-sm font-medium">Template para Filmes</span>
                      </div>
                      <Button 
                        variant="ghost" 
                        size="icon"
                        onClick={() => {
                          const downloader = document.createElement('a');
                          document.body.appendChild(downloader);
                          downloader.click();
                          document.body.removeChild(downloader);
                        }}
                      >
                        <Download className="h-4 w-4" />
                      </Button>
                    </div>
                    <p className="text-xs text-gray-400">Modelo CSV para importação de filmes</p>
                  </div>
                  
                  <div className="p-3 border border-gray-800 bg-gray-800/30 rounded-md hover:bg-gray-800/60 transition-colors">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center">
                        <FileSpreadsheet className="h-4 w-4 text-blue-400 mr-2" />
                        <span className="text-sm font-medium">Template para Séries</span>
                      </div>
                      <Button 
                        variant="ghost" 
                        size="icon"
                        onClick={() => {
                          const downloader = document.createElement('a');
                          document.body.appendChild(downloader);
                          downloader.click();
                          document.body.removeChild(downloader);
                        }}
                      >
                        <Download className="h-4 w-4" />
                      </Button>
                    </div>
                    <p className="text-xs text-gray-400">Modelo CSV para importação de séries</p>
                  </div>
                </div>
                
                <div className="space-y-3">
                  <h3 className="text-sm font-medium text-white">Instruções</h3>
                  <ul className="space-y-2 text-sm text-gray-400 list-disc pl-5">
                    <li>O arquivo CSV deve ter cabeçalhos na primeira linha</li>
                    <li>O campo "Título" é obrigatório para todos os registros</li>
                    <li>Separe múltiplos gêneros com vírgulas</li>
                    <li>Para séries, informe a temporada e o número do episódio</li>
                    <li>URLs de vídeo podem ser diretas ou do YouTube</li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        {/* API Import Tab */}
        <TabsContent value="api">
          <Card className="border-gray-800 bg-gray-900 shadow-md">
            <CardHeader>
              <CardTitle>Importar de APIs Externas</CardTitle>
              <CardDescription>
                Conecte a APIs externas para importar conteúdo automaticamente
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="p-4 border border-gray-800 bg-gray-800/30 rounded-md">
                  <div className="flex items-center mb-4">
                    <div className="bg-blue-500/20 p-2 rounded-full mr-3">
                      <FileType className="h-5 w-5 text-blue-500" />
                    </div>
                    <div>
                      <h3 className="text-md font-medium">TMDB (The Movie Database)</h3>
                      <p className="text-sm text-gray-400">Importe filmes e séries do TMDB API</p>
                    </div>
                  </div>
                  <Button className="w-full">
                    Configurar Conexão
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
                
                <div className="p-4 border border-gray-800 bg-gray-800/30 rounded-md">
                  <div className="flex items-center mb-4">
                    <div className="bg-red-500/20 p-2 rounded-full mr-3">
                      <FileType className="h-5 w-5 text-red-500" />
                    </div>
                    <div>
                      <h3 className="text-md font-medium">YouTube</h3>
                      <p className="text-sm text-gray-400">Importe vídeos e playlists do YouTube</p>
                    </div>
                  </div>
                  <Button className="w-full">
                    Configurar Conexão
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
                
                <div className="p-4 border border-gray-800 bg-gray-800/30 rounded-md">
                  <div className="flex items-center mb-4">
                    <div className="bg-green-500/20 p-2 rounded-full mr-3">
                      <FileType className="h-5 w-5 text-green-500" />
                    </div>
                    <div>
                      <h3 className="text-md font-medium">API Personalizada</h3>
                      <p className="text-sm text-gray-400">Conecte a uma API externa personalizada</p>
                    </div>
                  </div>
                  <Button className="w-full">
                    Configurar Conexão
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
